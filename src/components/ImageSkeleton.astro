---
interface Props {
  width?: string | number;
  height?: string | number;
  class?: string;
  rounded?: boolean;
  aspectRatio?: string;
}

const { 
  width = "100%", 
  height = "200px", 
  class: className = "",
  rounded = false,
  aspectRatio
} = Astro.props;

const style = aspectRatio ? `aspect-ratio: ${aspectRatio};` : "";
---

<div 
  class={`skeleton-loader ${rounded ? 'rounded-lg' : ''} ${className}`}
  style={`width: ${width}; height: ${height}; ${style}`}
  aria-hidden="true"
></div>

<style>
  .skeleton-loader {
    background: linear-gradient(90deg, 
      transparent 25%, 
      rgba(0, 0, 0, 0.08) 50%, 
      transparent 75%
    );
    background-size: 200% 100%;
    animation: skeleton-loading 1.5s infinite;
    border-radius: 0.5rem;
  }

  .dark .skeleton-loader {
    background: linear-gradient(90deg, 
      transparent 25%, 
      rgba(255, 255, 255, 0.2) 50%, 
      transparent 75%
    );
    background-size: 200% 100%;
  }

  @keyframes skeleton-loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  .skeleton-loader.rounded {
    border-radius: 0.5rem;
  }

  .skeleton-loader.rounded-lg {
    border-radius: 0.75rem;
  }

  .skeleton-loader.rounded-xl {
    border-radius: 1rem;
  }

  .skeleton-loader.rounded-2xl {
    border-radius: 1.5rem;
  }
</style>
